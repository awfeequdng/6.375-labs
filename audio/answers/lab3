1. My implementation of mkPitchAdjust is entirely combinational.
   The pitchAdjust rule takes input from a FIFO,
   adjusts the pitch, and enques output to a FIFO.
   Put and get actions access the FIFOs.
   A single round of pitch adjustment should take 1 cycle.

2. My ToMP and FromMP modules have two rules.
   The mapIn rule takes input from a FIFO and puts each element
   of the input vector into an element of a vector of CORDIC modules.
   The mapOut rule gets output from the vector of CORDIC modules,
   and enques output to a FIFO.
   Put and get actions access the FIFOs.
   A vector of complex numbers can be converted in K+1 cycles,
   assuming it takes K cycles to convert a single number.

   The words "If you are clever you may even be able to reuse the same
   code across both implementations" sounded like a fun challenge.
   I tried my hardest to make this work, but I couldn't.
   If you check out the "mapModule" branch in my git repository,
   you will see my attemp at this. I'll explain it below, and I'd
   appreciate some feedback on why it doesn't compile.

   I tried to define a module called mkMapModule.
   This module takes one argument (f), of type Module#(Server#(a, b)).
   It then runs replicateM on f, to make a vector of Servers,
   which each convert one thing of type a to one thing of type b.
   MapModule is itself a Server#(Vector#(len, a), Vector#(len, b)).
   
   If that worked, I could then use it to write ToMP and FromMP.
   However, when I try to compile it, I get the following error message:

Error: "PitchAdjust.bsv", line 72, column 8: (T0029)
  Signature mismatch (given too general):
  given:
  function a__#(PitchAdjust::MapModule#(e__, c__, d__)) f(Module#(ClientServer::Server#(c__, d__)) x1)   provisos (IsModule#(a__, b__))
  deduced:
  module f#(Module#(ClientServer::Server#(f__, g__)) x1)(PitchAdjust::MapModule#(h__, f__, g__))   provisos (IsModule#(Module, Id__))

   I don't understand why this is happening. Any help please?

3. About 1/3 of my time was spent writing initial implementations of things,
   1/2 my time was spent getting those implementations to compile,
   and the remaining 1/6 was spent debugging those implementations
   that didn't work the first time they were simulated.
